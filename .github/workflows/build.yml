name: Build

on:
  push:
    branches: [ master, sqlite3mc ]
    paths-ignore:
    - 'bld/bin/**'
  pull_request:
    branches: [ master, sqlite3mc ]
    paths-ignore:
    - 'bld/bin/**'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest, windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        path: "cb"
    - name: Setup cross compilers
      if: startsWith(matrix.os, 'ubuntu')
      run: ./cb/bld/setup_linux.sh
    - name: Setup NDK
      if: startsWith(matrix.os, 'ubuntu')
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r21e
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Generate script
      run: dotnet run
      working-directory: cb/bld
    - name: Update permissions
      run: chmod +x *.sh 
      working-directory: cb/bld
    - name: Clean output directory
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      run: rm -fr bin
      working-directory: cb/bld
    - name: Clean output directory
      if: startsWith(matrix.os, 'windows')
      run: rm bin -r -fo
      working-directory: cb/bld
    - name: Build (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        #!/bin/bash
        export PATH="$PWD/../../crosscompilers/bin:$PATH"
        set -e
        for f in linux_*.sh; do
          if [[ "$f" == *_cross.sh ]] || [[ "$f" == *_regular.sh ]]
          then
            continue
          fi
          bash "$f"
        done
      working-directory: cb/bld
    - name: Build (Android)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        set -e
        cd android_e_sqlite3mc
        ndk-build
        mkdir -p ../bin/e_sqlite3mc/android
        cp -r libs/* ../bin/e_sqlite3mc/android
        cd ../android_sqlite3mc
        ndk-build
        mkdir -p ../bin/sqlite3mc/android
        cp -r libs/* ../bin/sqlite3mc/android
#        cd ../android_e_sqlite3
#        ndk-build
#        mkdir -p ../bin/e_sqlite3/android
#        cp -r libs/* ../bin/e_sqlite3/android
      working-directory: cb/bld
    - name: Build (macOS, iOS, tvOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        set -e
        for f in mac_*.sh maccatalyst_*.sh ios_*.sh tvos_*.sh; do
          bash "$f"
        done
      working-directory: cb/bld
    - name: Build (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        $files = Get-ChildItem *.bat -Exclude "win_e_sqlite3mc.bat","win_sqlite3mc.bat"
        foreach ($f in $files) {
          cmd /C $f
        }
      working-directory: cb/bld
    - uses: actions/upload-artifact@v3
      with:
        name: bin-${{ matrix.os }}
        path: cb/bld/bin

  build-wasm:
    strategy:
      matrix:
        config:
          # Don't forget to add a download-artifact steps in test and publish
        - '{ "tfm": "net6.0", "emsdk": "2.0.23" }' # eol: 2024-11-12
        - '{ "tfm": "net7.0", "emsdk": "3.1.12" }' # eol: 2024-05-14
        - '{ "tfm": "net8.0", "emsdk": "3.1.34" }' # eol: 2026-11-14
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        path: "cb"
    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v12
      with:
        version: ${{ fromJSON(matrix.config).emsdk }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Generate script
      run: dotnet run
      working-directory: cb/bld
    - name: Update permissions
      run: chmod +x *.sh
      working-directory: cb/bld
    - name: Clean output directory
      run: rm -fr bin
      working-directory: cb/bld
    - name: Build (Wasm)
      run: |
        #!/bin/bash
        set -e
        for f in wasm_*.sh; do
          bash "$f" ${{ fromJSON(matrix.config).tfm }}
        done
      working-directory: cb/bld
    - uses: actions/upload-artifact@v3
      with:
        name: bin-wasm-${{ fromJSON(matrix.config).tfm }}
        path: cb/bld/bin

#  test:
#    needs: [ build, build-wasm]
#    if: ${{ github.event_name == 'pull_request' }}
#    strategy:
#      matrix:
#        # TODO want macos-latest here too, but the build currently fails there
#        os: [windows-2019]
#    runs-on: ${{ matrix.os }}
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        path: "cb"
#    - uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#        repository: ericsink/SQLitePCL.raw
#        path: "SQLitePCL.raw"
#    - name: Clean output directory
#      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
#      run: rm -fr bin
#      working-directory: cb/bld
#    - name: Clean output directory
#      if: startsWith(matrix.os, 'windows')
#      run: rm bin -r -fo
#      working-directory: cb/bld
#    - uses: actions/download-artifact@v3
#      with:
#        name: bin-ubuntu-20.04
#        path: cb/bld/bin
#    - uses: actions/download-artifact@v3
#      with:
#        name: bin-macos-latest
#        path: cb/bld/bin
#    - uses: actions/download-artifact@v3
#      with:
#        name: bin-windows-2019
#        path: cb/bld/bin
#    - uses: actions/download-artifact@v3
#      with:
#        name: bin-wasm-net6.0
#        path: cb/bld/bin
#    - uses: actions/download-artifact@v3
#      with:
#        name: bin-wasm-net7.0
#        path: cb/bld/bin
#    - uses: actions/download-artifact@v3
#      with:
#        name: bin-wasm-net8.0
#        path: cb/bld/bin
#    # note that the following is mostly a copy of the build script from the SQLitePCL.raw repo
#    - name: "Set up Java: 11"
#      uses: actions/setup-java@v1
#      with:
#        java-version: 11
#    - name: Setup .NET 6
#      uses: actions/setup-dotnet@v3
#      with:
#        dotnet-version: 6.0.x
#    - name: Install workload ios
#      run: dotnet workload install ios
#    - name: Install workload android
#      run: dotnet workload install android
#    - name: Install workload tvos
#      run: dotnet workload install tvos
#    - name: Setup .NET 5
#      uses: actions/setup-dotnet@v3
#      with:
#        dotnet-version: 5.0.x
#    - name: Setup .NET 3.1
#      uses: actions/setup-dotnet@v3
#      with:
#        dotnet-version: 3.1.x
#    - name: Install T4
#      run: dotnet tool install --global dotnet-t4
#    - name: Build
#      run: |
#        cd SQLitePCL.raw/build
#        dotnet run

  publish:
    needs: [ build, build-wasm ]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Clean output directory
      run: |
        rm -fr bin/e_sqlite3mc
        rm -fr bin/sqlite3mc
      working-directory: bld
    - uses: actions/download-artifact@v3
      with:
        name: bin-ubuntu-20.04
        path: bld/bin
    - uses: actions/download-artifact@v3
      with:
        name: bin-macos-latest
        path: bld/bin
    - uses: actions/download-artifact@v3
      with:
        name: bin-windows-2019
        path: bld/bin
    - uses: actions/download-artifact@v3
      with:
        name: bin-wasm-net6.0
        path: bld/bin
    - uses: actions/download-artifact@v3
      with:
        name: bin-wasm-net7.0
        path: bld/bin
    - uses: actions/download-artifact@v3
      with:
        name: bin-wasm-net8.0
        path: bld/bin
    - name: Fix permissions
      run: |
#        find ./bld/bin/e_sqlite3 -name *.so | xargs chmod 0775
#        find ./bld/bin/e_sqlite3 -name *.dylib | xargs chmod 0775
        find ./bld/bin/e_sqlite3mc -name *.so | xargs chmod 0775
        find ./bld/bin/e_sqlite3mc -name *.dylib | xargs chmod 0775
        find ./bld/bin/sqlite3mc -name *.so | xargs chmod 0775
        find ./bld/bin/sqlite3mc -name *.dylib | xargs chmod 0775
    - name: Commit & Push changes
      uses: actions-js/push@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: "refs/heads/staging"
        force: true
